{"head":{"title":"Internationalize your content","description":"You have multiple solutions available to help you translate your user interface and handle multiple locales. Here we will explain the…"},"body":"<p>You have multiple solutions available to help you translate your user interface\nand handle multiple locales.</p>\n<p>Here we will explain the solution based on\n<a href=\"https://github.com/yahoo/react-intl\">react-int</a>.</p>\n<p>First you need to install <code>react-intl</code>.</p>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--save react-intl</span></code></pre>\n<h2 id=\"translating-your-content\"><a href=\"#translating-your-content\" class=\"phenomic-HeadingAnchor\">#</a>Translating your content</h2>\n<p>We will use a <code>YAML</code> file to translate our content since this file format is\neasier to update than JSON (assuming your projects have simple needs).</p>\n<p>Obviously you can adjust this to a more complicated format if needed.</p>\n<p>You will need to get <code>yaml-loader</code> and <code>json-loader</code>.</p>\n<pre><code class=\"hljs language-console\">npm install --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span> yaml-loader json-loader</code></pre>\n<p>We will also need to add a webpack configuration loader section</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.yml$/</span>,\n  <span class=\"hljs-attr\">loaders</span>: [ <span class=\"hljs-string\">\"json-loader\"</span>, <span class=\"hljs-string\">\"yaml-loader\"</span> ],\n},</code></pre>\n<p>Now create differents <code>.yml</code> files in a <code>translations</code> folder.\nIf you want handle two languages, you have to create two files,\nwith language key as filename.</p>\n<p><code>src/translation/en.yml</code>:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">header:</span>\n<span class=\"hljs-attr\">  title:</span> <span class=\"hljs-string\">\"Phenomic\"</span>\n<span class=\"hljs-attr\">  posts:</span> <span class=\"hljs-string\">\"Posts\"</span>\n<span class=\"hljs-attr\">  fr:</span> <span class=\"hljs-string\">\"French\"</span>\n<span class=\"hljs-attr\">  en:</span> <span class=\"hljs-string\">\"English\"</span>\n\n<span class=\"hljs-attr\">content:</span>\n<span class=\"hljs-attr\">  phenomic-is-awesome:</span> <span class=\"hljs-string\">\"Phenomic is awesome !\"</span></code></pre>\n<p><code>src/translation/fr.yml</code>:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">header:</span>\n<span class=\"hljs-attr\">  title:</span> <span class=\"hljs-string\">\"Phenomic\"</span>\n<span class=\"hljs-attr\">  posts:</span> <span class=\"hljs-string\">\"Articles\"</span>\n<span class=\"hljs-attr\">  fr:</span> <span class=\"hljs-string\">\"Français\"</span>\n<span class=\"hljs-attr\">  en:</span> <span class=\"hljs-string\">\"Anglais\"</span>\n\n<span class=\"hljs-attr\">content:</span>\n<span class=\"hljs-attr\">  phenomic-is-awesome:</span> <span class=\"hljs-string\">\"Phenomic est génial !\"</span></code></pre>\n<h2 id=\"initialize-react-intl\"><a href=\"#initialize-react-intl\" class=\"phenomic-HeadingAnchor\">#</a>Initialize react-intl</h2>\n<p>We will need the <code>flat</code> lib to transform our translations files into flatten objects.\nThe <code>flat</code> lib will take our nested translations objects and flatten then.</p>\n<p>So instead of have:</p>\n<pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-attr\">header</span>: {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"Phenomic\"</span>,\n    <span class=\"hljs-attr\">posts</span>: <span class=\"hljs-string\">\"Posts\"</span>,\n  }\n}</code></pre>\n<p>We will have:</p>\n<pre><code class=\"hljs language-javascript\">{\n  <span class=\"hljs-string\">\"header.title\"</span>: <span class=\"hljs-string\">\"Phenomic\"</span>,\n  <span class=\"hljs-string\">\"header.posts\"</span>: <span class=\"hljs-string\">\"Posts\"</span>,\n}</code></pre>\n<pre><code class=\"hljs language-console\">npm <span class=\"hljs-selector-tag\">i</span> --save flat</code></pre>\n<p>We will assume all your urls will contain the locale key as the first part</p>\n<pre><code>http://domain.tld/en\nhttp://domain.tld/fr\n</code></pre>\n<p>If it's not the case, add the <code>route</code> metadata to your markdown files :</p>\n<p>Add a metadata <code>locale</code> to your <code>.md</code> files</p>\n<pre><code class=\"hljs language-markdown\">---\ntitle: Your title\n<span class=\"hljs-section\">route: en/your-title\n---</span>\nYour content</code></pre>\n<p>So let's initialize <code>react-intl</code> by creating an <code>src/utils/intl.js</code> file.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {addLocaleData} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl\"</span>\n<span class=\"hljs-keyword\">import</span> __intlEN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl/locale-data/en\"</span>\n<span class=\"hljs-keyword\">import</span> __intlFR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl/locale-data/fr\"</span>\n<span class=\"hljs-keyword\">import</span> flatten <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"flat\"</span>\n\n<span class=\"hljs-comment\">// Get our translations files</span>\n<span class=\"hljs-keyword\">import</span> localeEN <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"translations/en.yml\"</span>\n<span class=\"hljs-keyword\">import</span> localeFR <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"translations/fr.yml\"</span>\n\n<span class=\"hljs-comment\">// Load \"en\" and \"fr\" utils</span>\naddLocaleData(__intlEN)\naddLocaleData(__intlFR)\n\n<span class=\"hljs-keyword\">const</span> locales = [<span class=\"hljs-string\">\"fr\"</span>, <span class=\"hljs-string\">\"en\"</span>]\n<span class=\"hljs-keyword\">const</span> defaultLocale = <span class=\"hljs-string\">\"en\"</span>\n<span class=\"hljs-keyword\">const</span> messages = {\n  <span class=\"hljs-attr\">en</span>: flatten(localeEN),\n  <span class=\"hljs-attr\">fr</span>: flatten(localeFR),\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLocale</span>(<span class=\"hljs-params\">url</span>) </span>{\n  <span class=\"hljs-comment\">// Get the \"en\" from the url \"http://domain.tld/en\"</span>\n  <span class=\"hljs-keyword\">const</span> firstURIlevel = url.replace(<span class=\"hljs-regexp\">/^\\//</span>, <span class=\"hljs-string\">\"\"</span>).split(<span class=\"hljs-string\">\"/\"</span>)[<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-comment\">// If there is not the locale in the url, we take the default locale</span>\n  <span class=\"hljs-keyword\">return</span> firstURIlevel &#x26;&#x26; locales.indexOf(firstURIlevel) > <span class=\"hljs-number\">-1</span>\n    ? firstURIlevel\n    : defaultLocale\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getIntl</span>(<span class=\"hljs-params\">locale</span>) </span>{\n  <span class=\"hljs-comment\">// We will inject this into IntlProvider</span>\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">locale</span>: locale,\n    <span class=\"hljs-attr\">messages</span>: messages[locale],\n    <span class=\"hljs-attr\">defaultLocale</span>: defaultLocale,\n  }\n}</code></pre>\n<p>Now we need to inject props to the <a href=\"https://github.com/yahoo/react-intl/wiki/Components#intlprovider\"><code>IntlProvider</code></a>.\nWe will use our just created function <code>getIntl</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {IntlProvider} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl\"</span>\n<span class=\"hljs-keyword\">import</span> {getIntl, getLocale} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"utils/intl\"</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">const</span> AppContainer = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> {location} = <span class=\"hljs-keyword\">this</span>.context\n  <span class=\"hljs-keyword\">const</span> {children} = <span class=\"hljs-keyword\">this</span>.props\n  <span class=\"hljs-keyword\">const</span> locale = getLocale(location.pathname)\n  <span class=\"hljs-keyword\">const</span> intl = getIntl(locale)\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">IntlProvider</span> {<span class=\"hljs-attr\">...intl</span>}></span>\n      </span>&#x3C;Container>\n        &#x3C;DefaultHeadMeta />\n        &#x3C;Header />\n        &#x3C;Content>\n          {props.children}\n        &#x3C;/Content>\n        &#x3C;Footer />\n      &#x3C;/Container><span class=\"xml\">\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">IntlProvider</span>></span></span>\n  )\n}\n\nAppContainer.contextTypes = {\n  <span class=\"hljs-attr\">location</span>: PropTypes.object.isRequired,\n}</code></pre>\n<h2 id=\"get-your-translated-content\"><a href=\"#get-your-translated-content\" class=\"phenomic-HeadingAnchor\">#</a>Get your translated content</h2>\n<p>Use the <code>filter</code> option from <code>enhanceCollection</code> in your layouts to get your translated content :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {injectIntl, intlShape} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl\"</span>\n<span class=\"hljs-keyword\">import</span> {getLocale} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"utils/intl\"</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Homepage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">const</span> {collection} = <span class=\"hljs-keyword\">this</span>.context\n    <span class=\"hljs-keyword\">const</span> {intl} = <span class=\"hljs-keyword\">this</span>.props\n    <span class=\"hljs-keyword\">const</span> data = enhanceCollection(collection, {\n      <span class=\"hljs-comment\">// Filter the data by the \"locale\" front-matter metadata</span>\n      filter: <span class=\"hljs-function\">(<span class=\"hljs-params\">c</span>) =></span> c.layout === <span class=\"hljs-string\">\"Post\"</span>\n        &#x26;&#x26; getLocale(c.__url) === intl.locale,\n    })\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Page</span>></span>\n        // Render your data here\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Page</span>></span></span>\n    )\n  }\n}\n\nHomepage.contextTypes = {\n  <span class=\"hljs-attr\">collection</span>: PropTypes.array.isRequired,\n}\n\nHomepage.propTypes = {\n  <span class=\"hljs-attr\">intl</span>: intlShape.isRequired,\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> injectIntl(Homepage)</code></pre>\n<h2 id=\"update-your-header\"><a href=\"#update-your-header\" class=\"phenomic-HeadingAnchor\">#</a>Update your header</h2>\n<p>Once you can have your translated content, we have to add links in the header to change our locale and naviguate bewteen pages :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">import</span> {Link} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-router\"</span>\n<span class=\"hljs-keyword\">import</span> {FormattedMessage, injectIntl, intlShape} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-intl\"</span>\n<span class=\"hljs-keyword\">import</span> {getLocale} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"utils/intl\"</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Header</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-comment\">// ...</span>\n  render() {\n    <span class=\"hljs-comment\">// We get all pages that list posts (using Posts layout) and the url which match the language</span>\n    <span class=\"hljs-keyword\">const</span> postsPages = enhanceCollection(collection, {\n      <span class=\"hljs-attr\">filter</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">c</span>) =></span> (c.layout === <span class=\"hljs-string\">\"Posts\"</span> &#x26;&#x26; getLocale(c.__url) === intl.locale),\n    })\n\n    <span class=\"hljs-comment\">// Usually, we have only one page with the layout \"Posts\", so we get the first one</span>\n    <span class=\"hljs-keyword\">const</span> postsPage = postsPages.shift()\n\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span>\n        </span>&#x3C;nav>\n          // If \"postsPage\" is defined, the link will redirect to \"__url\" front-matter data\n          &#x3C;Link className={styles.item} to={postsPage &#x26;&#x26; postsPage.__url}>\n            // Translate the key \"header.posts\"\n            &#x3C;FormattedMessage id=\"header.posts\" />\n          &#x3C;/Link>\n          &#x3C;Link to=\"/en\">\n            &#x3C;FormattedMessage id=\"header.en\" />\n          &#x3C;/div>\n          &#x3C;Link to=\"/fr\">\n            &#x3C;FormattedMessage id=\"header.fr\" />\n          &#x3C;/div>\n        &#x3C;/nav>\n      &#x3C;/header>\n    )\n  }\n}\n\nHeader.propTypes = {\n  intl: intlShape.isRequired,\n}\n\nexport default injectIntl(Header)</code></pre>\n","__filename":"docs/usage/intl.md","__url":"/docs/usage/intl/","__resourceUrl":"/docs/usage/intl/index.html","__dataUrl":"/docs/usage/intl/index.html.e4cd5a234ac19187f032e34ddcb49382.json"}