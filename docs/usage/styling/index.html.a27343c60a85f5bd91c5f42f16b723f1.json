{"head":{"title":"How to style your app/website in Phenomic","description":"You are free to use whatever solutions you want: raw CSS, CSS preprocessors, CSS Modules, CSS in JS or inline styles. Below you will find…"},"body":"<p>You are free to use whatever solutions you want:\nraw CSS,\nCSS preprocessors,\n<a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a>,\n<a href=\"https://github.com/MicheleBertoli/css-in-js\">CSS in JS or inline styles</a>.</p>\n<p>Below you will find some details about most popular solutions.</p>\n<h2 id=\"recommended-syntax-and-architecture\"><a href=\"#recommended-syntax-and-architecture\" class=\"phenomic-HeadingAnchor\">#</a>Recommended syntax and architecture</h2>\n<p>The <code>phenomic-theme-base</code> allows you to write, by default, stylesheets with\ntwo different approaches:\nGlobal (normal) CSS and/or\n<a href=\"#css-modules\">CSS modules</a>.</p>\n<p>It also includes\n<a href=\"#postcss\">PostCSS</a>\nwith\n<a href=\"#cssnext\">cssnext</a>\nso you have a built-in modular CSS pre-processor.</p>\n<blockquote>\n<p>It's very easy to add another pre-processor like Sass or LESS.\nYou can look directly in the default <code>webpack.config.js</code> and look for the\nCSS section. A commented part is waiting for you with lot's of comments so\nyou can adjust to your need.</p>\n</blockquote>\n<p>The future-proof syntax / Local CSS is the recommended solution that plays nice\nwith React.</p>\n<p><strong>Note that the default CSS loaders only apply to <code>src</code> folder.\nIf you want to consume CSS from <code>node_modules</code>, you should adjust the\nwebpack configuration (a commented piece of code should be waiting for you).</strong></p>\n<hr>\n<h3 id=\"global-css\"><a href=\"#global-css\" class=\"phenomic-HeadingAnchor\">#</a>Global CSS</h3>\n<p>All files that ends with <code>.global.css</code> will be considered as normal CSS.\nThis is relevant for reset/normalize, global styles on html and body,\nand also for markup you don't control (eg: highlighted code in your markdown).</p>\n<h3 id=\"css-modules\"><a href=\"#css-modules\" class=\"phenomic-HeadingAnchor\">#</a>CSS Modules</h3>\n<p><a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>\nallows you to have generated local CSS classnames in your React components.\nThis ensure that classnames are local to your components and unique.</p>\n<blockquote>\n<p>The way the web and UI are evolving is clearly by following a component\napproach.\nYou should think about UI modules and styles your component one by one.</p>\n</blockquote>\n<p>If you need some global CSS variables in your modules,\n<a href=\"http://cssnext.io/usage/#features\">you can add some by tweaking cssnext configuration</a>\nin the <code>postcss</code> section of the webpack configuration.</p>\n<hr>\n<h3 id=\"postcss\"><a href=\"#postcss\" class=\"phenomic-HeadingAnchor\">#</a>PostCSS</h3>\n<p><a href=\"https://github.com/postcss/postcss\">PostCSS</a>\nis a modular tool that allows you to use future-proof and custom CSS syntax\n(by default, <a href=\"http://cssnext.io/\">postcss-cssnext</a> is enabled so you can use\na lot of new CSS features).</p>\n<h3 id=\"cssnext\"><a href=\"#cssnext\" class=\"phenomic-HeadingAnchor\">#</a>cssnext</h3>\n<p><a href=\"http://cssnext.io/\">cssnext</a>\nis a PostCSS plugin that helps you to use the latest CSS syntax today.\nIt transforms new CSS specs into more compatible CSS so you don't need to wait\nfor browser support.</p>\n<p><strong>ProTip™</strong>: For your layout, we advise you to use\n<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>\nwhenever you can.</p>\n<p><em>If you think this brief documentation is not enough, feel free to open an\nissue.</em></p>\n<hr>\n<h3 id=\"inline-styles--css-in-js\"><a href=\"#inline-styles--css-in-js\" class=\"phenomic-HeadingAnchor\">#</a>Inline styles / CSS in JS</h3>\n<h4 id=\"css-in-js\"><a href=\"#css-in-js\" class=\"phenomic-HeadingAnchor\">#</a>CSS in JS</h4>\n<p>While there are <a href=\"https://github.com/MicheleBertoli/css-in-js\">severals solutions</a>\nout there, some are more popular.\n<a href=\"https://github.com/threepointone/glamor/\">Glamor</a>\nand\n<a href=\"https://github.com/Khan/aphrodite\">Aphrodite</a>\nshould work out of the box.\nStatic rendering step will take that into account and will pre-render styles\nfor you. Nothing to setup.\nIt’s even injecting all requirements if you want to rehydrate on startup (in <code>window._glamor</code> or <code>window._aphrodite</code>).</p>\n<p>An optional (but recommended) step is to enable re-hydration.\nYou will need to add some code in your <code>scripts/phenomic.browser.js</code>\nand adjust the code depending on the library you use.</p>\n<h5 id=\"glamor\"><a href=\"#glamor\" class=\"phenomic-HeadingAnchor\">#</a>Glamor</h5>\n<p>You need to adjust your <code>scripts/phenomic.browser.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">import</span> { rehydrate } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"glamor\"</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>._glamor) {\n  rehydrate(<span class=\"hljs-built_in\">window</span>._glamor)\n}\n\nphenomicClient({ <span class=\"hljs-comment\">/* ... */</span> })</code></pre>\n<p><a href=\"https://github.com/threepointone/glamor/blob/master/docs/server.md\">See glamor server documentation</a></p>\n<h5 id=\"aphrodite\"><a href=\"#aphrodite\" class=\"phenomic-HeadingAnchor\">#</a>Aphrodite</h5>\n<p>You need to adjust your <code>scripts/phenomic.browser.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">import</span> { StyleSheet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"aphrodite\"</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>._aphrodite) {\n  StyleSheet.rehydrate(<span class=\"hljs-built_in\">window</span>._aphrodite)\n}\n\nphenomicClient({ <span class=\"hljs-comment\">/* ... */</span> })</code></pre>\n<p><a href=\"https://github.com/Khan/aphrodite#server-side-rendering\">See aphrodite server documentation</a></p>\n<h5 id=\"styled-components\"><a href=\"#styled-components\" class=\"phenomic-HeadingAnchor\">#</a>styled-components</h5>\n<p>styled-components doesn't work out-of-the-box with Phenomic (<em>yet</em>) but a manual workaround is available. Start by creating <code>src/components/ServerSideStyles.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/ServerSideStyles.js</span>\n<span class=\"hljs-keyword\">import</span> React, { PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> Helmet <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-helmet\"</span>\n<span class=\"hljs-keyword\">import</span> styleSheet <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"styled-components/lib/models/StyleSheet\"</span>\n\n<span class=\"hljs-keyword\">const</span> ServerSideStyles = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {\n  <span class=\"hljs-keyword\">const</span> styles = styleSheet.rules().map(<span class=\"hljs-function\"><span class=\"hljs-params\">rule</span> =></span> rule.cssText).join(<span class=\"hljs-string\">\"\\n\"</span>)\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">window</span> !== <span class=\"hljs-string\">\"undefined\"</span> \n    ? <span class=\"hljs-literal\">null</span>\n    : <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Helmet</span> \n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{</span> [ \n          { <span class=\"hljs-attr\">type:</span> \"<span class=\"hljs-attr\">text</span>/<span class=\"hljs-attr\">css</span>\", <span class=\"hljs-attr\">cssText:</span> <span class=\"hljs-attr\">styles</span> }\n         ] }\n      /></span>\n  )\n}\n\nexport default ServerSideStyles</span></code></pre>\n<p>The code above imports the stylesheet that styled-components uses internally, extracts all the CSS rules from it, and injects those rules into the head using Helmet when rendering server-side. </p>\n<p>Next, edit <code>src/AppContainer.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/AppContainer.js</span>\n<span class=\"hljs-keyword\">import</span> ServerSideStyles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./components/ServerSideStyles\"</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-keyword\">const</span> AppContainer = <span class=\"hljs-function\">(<span class=\"hljs-params\">props</span>) =></span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Container</span>></span>\n    </span>&#x3C;DefaultHeadMeta /><span class=\"xml\">\n    </span>&#x3C;Header /><span class=\"xml\">\n    </span>&#x3C;Content>\n      { props.children }\n    &#x3C;/Content><span class=\"xml\">\n    </span>&#x3C;Footer /><span class=\"xml\">\n    </span>&#x3C;ServerSideStyles /><span class=\"xml\">\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Container</span>></span></span>\n)</code></pre>\n<p>The changes above import our <code>&#x3C;ServerSideStyles /></code> component and add it as the <em>last</em> component inside <code>Container</code>. You're all set.</p>\n<p><em>NOTE: <code>&#x3C;ServerSideStyles /></code> <strong>must</strong> be the last component in your component heirarchy so that it captures all the styles in the component tree.</em></p>\n<h4 id=\"a-note-on-pure-inline-styles\"><a href=\"#a-note-on-pure-inline-styles\" class=\"phenomic-HeadingAnchor\">#</a>A note on pure inline styles</h4>\n<p>Unfortunately, pure inline styles don't play well with pre-rendering for now.\nWhen we build the static version, we don't know what devices the site will be\nviewed on,\nso viewport adjustments can't be done properly and will therefore result in some\nvisual changes/re-rendering.\nThat's because pure inline styles don't have media queries.</p>\n<p>You can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn't an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn't the case!</p>\n","__filename":"docs/usage/styling.md","__url":"/docs/usage/styling/","__resourceUrl":"/docs/usage/styling/index.html","__dataUrl":"/docs/usage/styling/index.html.a27343c60a85f5bd91c5f42f16b723f1.json"}